pipeline {
    agent any

    environment {
        APP_NAME = "my-jenkins-app-v2"
        APP_VERSION = "1.0.$BUILD_ID"
        APP_FULL_NAME = "$APP_NAME:$APP_VERSION"
        AWS_DEFAULT_REGION = "us-east-1"
        AWS_ECS_CLUSTER = "Learn-JenkinsApp-Cluster-Prod"
        AWS_ECS_SERVICE_PROD = "LearnJenkinsApp-Service-Prod"
        AWS_ECS_TD_PROD = "LearnJenkinsApp-TaskDefinition-Prod"
        AWS_DOCKER_REGISTRY = "383588333141.dkr.ecr.us-east-1.amazonaws.com"
    }

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                dir('jenkins-v2/app') {
                    sh '''
                        ls -la
                        node --version
                        npm --version
                        npm ci
                        npm run build
                        ls -la .next
                    '''
                }
            }
        }
        stage('Build Docker image') {
            agent {
                docker {
                    image 'my-aws-cli'
                    reuseNode true
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                }
            }
            steps {
                dir('jenkins-v2/app/') {
                    withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {     
                        sh '''
                            ls -la .next
                            docker build -t $AWS_DOCKER_REGISTRY/$APP_FULL_NAME -f aws/Dockerfile .
                            aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_DOCKER_REGISTRY
                            docker push $AWS_DOCKER_REGISTRY/$APP_FULL_NAME
                        '''
                    }
                }
            }
        }
        stage('Deploy to AWS') {
           agent {
                docker {
                    image 'my-aws-cli'
                    args "-u root --entrypoint=''"
                }
           }
           steps {
                withCredentials([usernamePassword(credentialsId: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        aws --version
                        LATEST_TD_REVISION=$(aws ecs register-task-definition --cli-input-json file://jenkins-v2/app/aws/task-definition-prod.json | jq '.taskDefinition.revision')
                        aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE_PROD --task-definition $AWS_ECS_TD_PROD:$LATEST_TD_REVISION
                        aws ecs wait services-stable --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE_PROD
                    '''
                }
           } 
        }
    }
}
